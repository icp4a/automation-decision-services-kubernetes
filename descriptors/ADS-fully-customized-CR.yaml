###############################################################################
##
## Licensed Materials - Property of IBM
##
## (C) Copyright IBM Corp. 2023, 2024. All Rights Reserved.
##
## US Government Users Restricted Rights - Use, duplication or
## disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
##
###############################################################################

# This file is a sample of a resource file for Automation Decision Services (ADS)
# where all parameters are exposed with their default value. It is intended for documentation purpose.
# For real installations, a typical resource should generally contain only the required
# parameters.  This will ease maintenance and upgrade to newer versions of ADS.

apiVersion: ads.ibm.com/v1
kind: AutomationDecisionService
metadata:
  # Name of this ADS instance.
  # The name of some resources listed below, or automatically generated by the operator, are prefixed by this name.
  name: "sample"

spec:
  # Required: if this value is not "24.0.1" the operator ignores this resource.
  version: "24.0.1"

  license:
    # Required: used to accept license, the only valid value only is the boolean true.
    # License information: http://www14.software.ibm.com/cgi-bin/weblap/lap.pl?li_formnum=L-ASAY-CHVJG8
    accept:

  # You can specify a profile size for Automation Decision Services - valid values are small,medium,large,extra-large.
  # The default is small.
  # This value affects the default resource requests and limits of ADS services.
  # Example resources in this file are reflecting small profile ones.
  deployment_profile_size: "small"

  # List of image pull secrets for download of container images of Automation Decision Services
  image_pull_secrets:
    - "ibm-entitlement-key"

  # Setting for secure computing mode (seccomp) profile for Automation Decision Services containers.
  # By default, no seccomp profile is set on the ADS containers, except when installing on OpenShift
  # Container Platform (OCP) and Red Hat OpenShift Kubernetes Service (ROKS) version 4.11 and later
  # where a "RuntimeDefault" profile is automatically set.
  # For more information on seccomp please refer to https://kubernetes.io/docs/tutorials/security/seccomp/ and
  # https://docs.openshift.com/container-platform/4.12/security/seccomp-profiles.html
  # NOTE: Defining a custom, localhost seccomp profile that is stricter than the default RuntimeDefault profile
  # may cause ADS pods fail to start.  This custom profile should be created at the worker nodes.
  #seccomp_profile:
  #  type: "RuntimeDefault" # or "Localhost", "Unconfined"
  #  # Local path of custom seccomp profile when type `Localhost` is used. The custom profile must be accessible by
  #  # the pod and must exist locally on all worker nodes.  For example: `/profiles/fine-grained.json`.
  #  # localhost_profile: ""

  # Default storage class name used for Zen and Automation Decision Services.
  # Can be overridden in specific sections, such as spec.zen.block_storage_classname.
  # Not setting this storage_class_name (or setting it to null) means that the default storage class of the Kubernetes cluster is used.
  # Modifying this parameter after the initial installation has not effect.
  storage_classname: null

  # List of secrets containing TLS CA certificates that must be trusted by Automation Decision Services
  # in addition to the system Root Certificate Authorities.
  # Each listed secret must contain a "tls.crt" key with a PEM-encoded certificate.
  trusted_certificate_list: []

  # Set the runAsUser parameter of the security context of the pods of Automation Decision Services.
  # On OpenShift Container Platform (OCP) and Red Hat OpenShift Kubernetes Service (ROKS), this parameter has no effect and no runAsUser parameter is set on pods.
  # On other Kubernetes clusters, the default value is 50001, except for the embedded MongoDB instance (see below).
  #run_as_user: 50001

  # These parameters configure the installation of the Zen instance that is triggered by this ADS instance.
  zen:
    # Set the storage class for persistent volumes backed by a block device as needed by Zen.
    # By default, use the spec.zen.file_storage_classname or spec.storage_classname value, but either
    # one or the other must be set to a non null value.
    # Modifying this parameter after the initial installation has not effect.
    #block_storage_classname: ""

    # Set the profile size of Zen.
    # Possible values are starterset, small, medium, large and xlarge.
    # By default, with the small profile for ADS, Zen is instanciated with the starterset scale config
    scale_config: "starterset"

  mongo:
    # Controls usage of the embeded MongoDB instance.  Usage of this embedded MongoDB instance is not recommended in production.
    # By default, this embedded mongo instance is not used, and an external instance must be provided.
    # If you provide an external mongo db, fill the mongo connection string in the admin secret referenced below.
    use_embedded: false

    # Name of secret providing connection details for the external MongoDB instance.
    # When using the embedded MongoDB instance, this secret will be created and managed by the ADS operator.
    admin_secret_name: "sample-ads-mongo-secret"

    # When using the embedded MongoDB instance, this persistence section controls the persistence volume of this instance.
    persistence:
      # When enabled, a persistent volume is used to store data of the embedded MongoDB instance,
      # otherwise the data is stored on an ephemeral volume.
      enabled: true

      # Activate the dynamic provisionning of Persistent Volume for the embedded MongoDB instance.
      # If enabled, the storage_class_name parameter is considered for configuration of this dynamic provisionning.
      use_dynamic_provisioning: true

      # If use_dynamic_provisioning is true, define the name of the storage class that is required for the persistent
      # volume of the embedded MongoDB instance.
      # Not setting this storage_class_name (or setting it to null) means using the default storage class of the cluster.
      # This parameter cannot be changed after installation. This setting is ignored when dynamic provisionning is disabled.
      storage_class_name: null

      resources:
        requests:
          # The size of the persistent volume (PV) requested through a Persistent Value Claim (PVC) for the embedded
          # MongoDB instance. A string that represents a Kubernetes byte quantity.
          storage: "3Gi"

    # Set the runAsUser parameter of the security context of the pod for the embedded MongoDB instance,
    # overriding the general ADS parameter spec.run_as_user.
    # By default, no runAsUser parameter is set on pods for the embedded MongoDB instance.
    #run_as_user: 50001

    # Set the fsGroup  parameter of the security context of the pod for the embedded MongoDB instance.
    # The default setting doesn't set a value for this parameter, letting the default Kubernetes cluster behavior apply.
    # Note that on OpenShift Container Platform (OCP) and Red Hat OpenShift Kubernetes Service (ROKS), the runAsGroup
    # parameter is set to 0 on these pods.
    #fs_group: 0

    # CPU and memory settings for the embedded MongoDB instance.
    # This sample shows the default values for the small deployment profile.
    # This setting overrides the default value inherited from the deployment profile.
    resources:
      requests:
        cpu: '500m'
        memory: '256Mi'
        ephemeral_storage: '100Mi'
      limits:
        cpu: '1000m'
        memory: '1Gi'
        ephemeral_storage: '500Mi'

    # Optional set of custom labels to set on pods of the embedded MongoDB instance.
    # Label names and values must be strings, not prefixed with "kubernetes.io/" or "ads.ibm.com/"
    labels: {}

    # Configure liveness and readiness probes for the pods of the embedded MongoDB instance.
    liveness_probe:
      timeout_seconds: 7
    readiness_probe:
      timeout_seconds: 7


  decision_designer:
    # Controls whether Decision Designer is deployed or not.
    enabled: false

    # The name of the secret that contains all the Decision Designer sensitive data, like encryption key for
    # sensitive data.
    admin_secret_name: "sample-ads-designer-secret"

    # You can specify a profile size for ADS Designer if different from the rest of ADS.
    # valid values are small,medium,large - default is small.
    # Resources in this file are reflecting small profile ones.
    #deployment_profile_size: "small"

    # Config maps containing certificates to trust for specific usage in addition to the certificates from
    # spec.trusted_certificate_list above.
    # A single name of config map can be specified for each parameter, but each entry with a key name that ends
    # with .crt will be included.
    #git_servers_certs:
    #ml_providers_certs:
    #other_trusted_certs:

    # Optional set of custom labels to set on pods of all components of Decision Designer.
    # Label names and values must be strings, not prefixed with "kubernetes.io/" or "ads.ibm.com/"
    labels: {}

    # Configure the 'rest api' service of Automation Decision Services
    # Refer to the comments on the 'front' section above for the parameters replica_count,
    # resources, liveness_probe, readiness_probe, startup_probe and labels.
    rest_api:
      resources:
        requests:
          cpu: '500m'
          memory: '800Mi'
          ephemeral_storage: '100Mi'
        limits:
          cpu: '1000m'
          memory: '1.5Gi'
          ephemeral_storage: '1300Mi'
      liveness_probe:
        timeout_seconds: 7
      readiness_probe:
        timeout_seconds: 7
      startup_probe:
        timeout_seconds: 7
      labels: {}

    # Configure the 'credentials' service of Automation Decision Services
    # Refer to the comments on the 'front' section above for the parameters replica_count,
    # resources, liveness_probe, readiness_probe, startup_probe and labels.
    credentials_service:
      replica_count: 1
      resources:
        requests:
          cpu: '250m'
          memory: '800Mi'
          ephemeral_storage: '100Mi'
        limits:
          cpu: '1000m'
          memory: '1.5Gi'
          ephemeral_storage: '500Mi'
      liveness_probe:
        timeout_seconds: 7
      readiness_probe:
        timeout_seconds: 7
      startup_probe:
        timeout_seconds: 7
      labels: {}

    # Configure the git service of Automation Decision Services
    # Refer to the comments on the 'front' section above for the parameters replica_count,
    # resources, liveness_probe, readiness_probe, startup_probe and labels.
    git_service:
      replica_count: 1
      resources:
        requests:
          cpu: '500m'
          memory: '800Mi'
          ephemeral_storage: '100Mi'
        limits:
          cpu: '1000m'
          memory: '1.5Gi'
          ephemeral_storage: '500Mi'
      liveness_probe:
        timeout_seconds: 7
      readiness_probe:
        timeout_seconds: 7
      startup_probe:
        timeout_seconds: 7
      labels: {}

      # Max upload file size in bytes for upload in designer.
      # Default value is 67108864 (64MB)
      max_upload_file_size: 67108864

    # Configure the parsing service of Automation Decision Services
    # Refer to the comments on the 'front' section above for the parameters replica_count,
    # resources, liveness_probe, readiness_probe, startup_probe and labels.
    parsing_service:
      replica_count: 1
      resources:
        requests:
          cpu: '250m'
          memory: '800Mi'
          ephemeral_storage: '100Mi'
        limits:
          cpu: '1000m'
          memory: '1.5Gi'
          ephemeral_storage: '800Mi'
      liveness_probe:
        timeout_seconds: 7
      readiness_probe:
        timeout_seconds: 7
      startup_probe:
        timeout_seconds: 7
      labels: {}

      # The Horizontal Pod Autoscaling (HPA) of this service is enabled by default only when
      # the deployment profile is set to "extra-large".
      autoscaling:
        # Allows to force status of the HPA independently of the deployment profile.
        #enabled: false
        max_replicas: 2
        min_replicas: 5
        target_cpu_average_utilization: 160

    # Configure the run service of Automation Decision Services
    # Refer to the comments on the 'front' section above for the parameters replica_count,
    # resources, liveness_probe, readiness_probe, startup_probe and labels.
    run_service:
      replica_count: 1
      resources:
        requests:
          cpu: '500m'
          memory: '800Mi'
          ephemeral_storage: '100Mi'
        limits:
          cpu: '1000m'
          memory: '1.5Gi'
          ephemeral_storage: '800Mi'
      liveness_probe:
        timeout_seconds: 7
      readiness_probe:
        timeout_seconds: 7
      startup_probe:
        timeout_seconds: 7
      labels: {}

      # The Horizontal Pod Autoscaling (HPA) of this service is enabled by default only when
      # the deployment profile is set to "extra-large".
      autoscaling:
        # Allows to force status of the HPA independently of the deployment profile.
        #enabled: false
        max_replicas: 2
        min_replicas: 5
        target_cpu_average_utilization: 160

  decision_runtime:
    # Controls whether the Decision runtime is deployed or not.
    enabled: false

    # The name of the secret that contains all the Decision runtime sensitive data, like encryption key for sensitive data
    # and the credentials for specific management accounts.
    admin_secret_name: "sample-ads-designer-secret"

    # The type of storage for decision archives.  Either "fs" or "s3".
    # When using the "fs" value, see the persistence section below.
    # When using the "s3" value, see the s3 section below.
    archive_storage_type: "fs"

    # You can specify a profile size for the ADS runtime if different from the rest of ADS.
    # Valid values are small,medium,large - default is small.
    # Resources in this file are reflecting small profile ones.
    #deployment_profile_size: "small"

    # Configuration of the decision archive storage on S3.
    # Applies when the archive_storage_type is set to "s3".
    s3:
      # The following bucket_name, region, server_url are mandatory parameters to identify the S3 bucket
      # for the decision archive storage.
      bucket_name: ""
      region: ""
      server_url: ""

      # Storage region is required depending on the type of S3 compatible server that is targeted.
      storage_region: ""

      # Name of secret containing the credentials for access to the S3 bucket.
      # Leave empty if no authentication is required by the S3 server.
      secret_name: ""

      # The S3 connection timeout, in milliseconds. A value of 0 means an infinite timeout
      # and is not recommended.
      connection_timeout: 10000

      # The timeout for an S3 request, in milliseconds. A zero or negative value disables this feature.
      request_timeout: 0

      # Delay, in days, for actual deletion of a decision archive after is has been requested.
      deployment_space_deletion_delay: 0

    # Optional set of custom labels to set on pods of all components of the decision runtime.
    # Label names and values must be strings, not prefixed with "kubernetes.io/" or "ads.ibm.com/"
    labels: {}

    decision_runtime_service:
      # Set the fsGroup  parameter of the security context of the pod for the decision runtime.
      # The default setting doesn't set a value for this parameter, letting the default Kubernetes cluster behavior apply.
      # Note that on OpenShift Container Platform (OCP) and Red Hat OpenShift Kubernetes Service (ROKS), the runAsGroup
      # parameter is set to 0 on these pods.
      #fs_group: 0

      liveness_probe:
        timeout_seconds: 7
      readiness_probe:
        timeout_seconds: 7
      startup_probe:
        timeout_seconds: 7

      # Number of replica for the service.  Default is one with the small deployment profile.
      # This setting overrides the default value inherited from the deployment profile.
      replica_count: 1
      # CPU and memory settings for the decision runtime service.
      # This sample shows the default values for the small deployment profile.
      # This setting overrides the default value inherited from the deployment profile.
      resources:
        requests:
          cpu: '500m'
          memory: '2Gi'
          ephemeral_storage: '100Mi'
        limits:
          cpu: '1000m'
          memory: '3Gi'
          ephemeral_storage: '800Mi'

      # Optional set of custom labels to set on pods of the decision runtime service.
      # Label names and values must be strings, not prefixed with "kubernetes.io/" or "ads.ibm.com/".
      # This set augments the set of custom labels defined at the decision_runtime level.
      labels: {}
      
      # The Horizontal Pod Autoscaling (HPA) of this service is enabled by default only when
      # the deployment profile is set to "extra-large".
      autoscaling:
        # Allows to force status of the HPA independently of the deployment profile.
        #enabled: false
        max_replicas: 2
        min_replicas: 5
        target_cpu_average_utilization: 160

      # Configure the cache of decision archives in the decision runtime
      cache:
        config:
          # An XML fragment to configure how decision service archives expire in the cache.
          expiry: ""
          # An XML fragment to configure the maximum size of the decision service archives cache.
          resources: |-
            <heap unit="entries">100</heap>

      # The interval, in milliseconds, between checks and updates of the cached decisions.
      storage_decision_check_status_interval: 30000

      # Configure the cache of decision metadata in the decision runtime
      metadata:
        cache:
          config:
            # Interval in milliseconds between checks/updates of the decision metadata cache.
            check_interval: 30000
            # An XML fragment to configure how metadata expire in the cache. The syntax is identical to cache.config.expiry.
            expiry: ""
            manager:
              # Number of concurrent threads perform metadata cache updates
              threads: 1
            resources: |-
              <heap unit="entries">100</heap>

      # Configure the cache of decision selection results in the decision runtime
      decision_selection:
        cache:
          config:
            expiry: ""
            resources: |-
              <heap unit="entries">100</heap>
        # Interval in milliseconds between the execution of decision selection storage queries in the same thread.
        query_interval: 1000 # 1 second
        # Maximum number of threads that perform updates of the decision selection results cache concurrently.
        threads: 0
        # Interval in milliseconds between decision selection results cache updates.
        update_interval: 120000 # 2 minutes

      # Configuration of the decision archive storage on file-system.
      # Applies when the archive_storage_type is set to "fs".
      persistence:
        # When enabled, a persistent volume is used to store data of the decision runtime,
        # otherwise the data is stored on an ephemeral volume.
        enabled: true

        # Activate the dynamic provisionning of the Persistent Volume.
        # If enabled, the storage_class_name parameter is considered for configuration of this dynamic provisionning.
        use_dynamic_provisioning: true

        # If use_dynamic_provisioning is true, define the name of the storage class that is required for the persistent volume.
        # Not setting this storage_class_name (or setting it to null) means using the default storage class. This parameter
        # cannot be changed after installation.
        # This setting is ignored when dynamic provisionning is disabled.
        storage_class_name: null

        resources:
          requests:
            # The size of the persistent volume (PV) requested through a Persistent Value Claim (PVC). A string that
            # represents a Kubernetes byte quantity.
            storage: "1Gi"

      # Whether the decision runtime should include an exception stack trace when an incident occurs.
      # This should only be used for debugging purposes, as a stack trace may expose sensitive internal data.
      stack_trace_enabled: false

      tls:
        # Accept self-signed certificates from external services accessed by the runtime like decision storage or ML providers.
        allow_self_signed: false
        # Verify hostnames of certificates received from external services accessed by the runtime
        verify_host_name: true
        # Name of a configmap containing CA certicates to trust when connecting to external services in addition to
        # the certificates from spec.trusted_certificate_list above.
        # Keys must match the '*.crt' pattern.
        certs_config_map_name: ""
